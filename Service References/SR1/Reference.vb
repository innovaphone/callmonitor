'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:2.0.50727.1433
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace SR1
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute([Namespace]:="http://innovaphone.com/pbx", ConfigurationName:="SR1.pbxPortType")>  _
    Public Interface pbxPortType
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#Version", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded)>  _
        Function Version(ByVal request As SR1.VersionRequest) As SR1.VersionResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#Version", ReplyAction:="*")>  _
        Function BeginVersion(ByVal request As SR1.VersionRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndVersion(ByVal result As System.IAsyncResult) As SR1.VersionResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#Echo", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded)>  _
        Function Echo(ByVal request As SR1.EchoRequest) As SR1.EchoResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#Echo", ReplyAction:="*")>  _
        Function BeginEcho(ByVal request As SR1.EchoRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndEcho(ByVal result As System.IAsyncResult) As SR1.EchoResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#Admin", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded)>  _
        Function Admin(ByVal request As SR1.AdminRequest) As SR1.AdminResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#Admin", ReplyAction:="*")>  _
        Function BeginAdmin(ByVal request As SR1.AdminRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndAdmin(ByVal result As System.IAsyncResult) As SR1.AdminResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#Initialize", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded)>  _
        Function Initialize(ByVal request As SR1.InitializeRequest) As SR1.InitializeResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#Initialize", ReplyAction:="*")>  _
        Function BeginInitialize(ByVal request As SR1.InitializeRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndInitialize(ByVal result As System.IAsyncResult) As SR1.InitializeResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#End", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded)>  _
        Function [End](ByVal request As SR1.EndRequest) As SR1.EndResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#End", ReplyAction:="*")>  _
        Function BeginEnd(ByVal request As SR1.EndRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndEnd(ByVal result As System.IAsyncResult) As SR1.EndResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#Poll", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function Poll(ByVal request As SR1.PollRequest) As SR1.PollResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#Poll", ReplyAction:="*")>  _
        Function BeginPoll(ByVal request As SR1.PollRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndPoll(ByVal result As System.IAsyncResult) As SR1.PollResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#License", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function License(ByVal request As SR1.LicenseRequest) As SR1.LicenseResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#License", ReplyAction:="*")>  _
        Function BeginLicense(ByVal request As SR1.LicenseRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndLicense(ByVal result As System.IAsyncResult) As SR1.LicenseResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#Calls", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function Calls(ByVal request As SR1.CallsRequest) As SR1.CallsResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#Calls", ReplyAction:="*")>  _
        Function BeginCalls(ByVal request As SR1.CallsRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndCalls(ByVal result As System.IAsyncResult) As SR1.CallsResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserInitialize", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserInitialize(ByVal request As SR1.UserInitializeRequest) As SR1.UserInitializeResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserInitialize", ReplyAction:="*")>  _
        Function BeginUserInitialize(ByVal request As SR1.UserInitializeRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserInitialize(ByVal result As System.IAsyncResult) As SR1.UserInitializeResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="capeconnect:pbx:pbxPortType#UserEnd", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserEnd(ByVal request As SR1.UserEndRequest) As SR1.UserEndResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="capeconnect:pbx:pbxPortType#UserEnd", ReplyAction:="*")>  _
        Function BeginUserEnd(ByVal request As SR1.UserEndRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserEnd(ByVal result As System.IAsyncResult) As SR1.UserEndResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserCall", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserCall(ByVal request As SR1.UserCallRequest) As SR1.UserCallResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserCall", ReplyAction:="*")>  _
        Function BeginUserCall(ByVal request As SR1.UserCallRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserCall(ByVal result As System.IAsyncResult) As SR1.UserCallResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserClear", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserClear(ByVal request As SR1.UserClearRequest) As SR1.UserClearResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserClear", ReplyAction:="*")>  _
        Function BeginUserClear(ByVal request As SR1.UserClearRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserClear(ByVal result As System.IAsyncResult) As SR1.UserClearResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserConnect", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserConnect(ByVal request As SR1.UserConnectRequest) As SR1.UserConnectResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserConnect", ReplyAction:="*")>  _
        Function BeginUserConnect(ByVal request As SR1.UserConnectRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserConnect(ByVal result As System.IAsyncResult) As SR1.UserConnectResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserPickup", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserPickup(ByVal request As SR1.UserPickupRequest) As SR1.UserPickupResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserPickup", ReplyAction:="*")>  _
        Function BeginUserPickup(ByVal request As SR1.UserPickupRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserPickup(ByVal result As System.IAsyncResult) As SR1.UserPickupResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserRedirect", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserRedirect(ByVal request As SR1.UserRedirectRequest) As SR1.UserRedirectResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserRedirect", ReplyAction:="*")>  _
        Function BeginUserRedirect(ByVal request As SR1.UserRedirectRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserRedirect(ByVal result As System.IAsyncResult) As SR1.UserRedirectResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserReroute", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserReroute(ByVal request As SR1.UserRerouteRequest) As SR1.UserRerouteResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserReroute", ReplyAction:="*")>  _
        Function BeginUserReroute(ByVal request As SR1.UserRerouteRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserReroute(ByVal result As System.IAsyncResult) As SR1.UserRerouteResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserTransfer", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserTransfer(ByVal request As SR1.UserTransferRequest) As SR1.UserTransferResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserTransfer", ReplyAction:="*")>  _
        Function BeginUserTransfer(ByVal request As SR1.UserTransferRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserTransfer(ByVal result As System.IAsyncResult) As SR1.UserTransferResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserCtComplete", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserCtComplete(ByVal request As SR1.UserCtCompleteRequest) As SR1.UserCtCompleteResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserCtComplete", ReplyAction:="*")>  _
        Function BeginUserCtComplete(ByVal request As SR1.UserCtCompleteRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserCtComplete(ByVal result As System.IAsyncResult) As SR1.UserCtCompleteResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserHold", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserHold(ByVal request As SR1.UserHoldRequest) As SR1.UserHoldResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserHold", ReplyAction:="*")>  _
        Function BeginUserHold(ByVal request As SR1.UserHoldRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserHold(ByVal result As System.IAsyncResult) As SR1.UserHoldResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserRetrieve", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserRetrieve(ByVal request As SR1.UserRetrieveRequest) As SR1.UserRetrieveResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserRetrieve", ReplyAction:="*")>  _
        Function BeginUserRetrieve(ByVal request As SR1.UserRetrieveRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserRetrieve(ByVal result As System.IAsyncResult) As SR1.UserRetrieveResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserPark", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserPark(ByVal request As SR1.UserParkRequest) As SR1.UserParkResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserPark", ReplyAction:="*")>  _
        Function BeginUserPark(ByVal request As SR1.UserParkRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserPark(ByVal result As System.IAsyncResult) As SR1.UserParkResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#UserLocalNum", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function UserLocalNum(ByVal request As SR1.UserLocalNumRequest) As SR1.UserLocalNumResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#UserLocalNum", ReplyAction:="*")>  _
        Function BeginUserLocalNum(ByVal request As SR1.UserLocalNumRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndUserLocalNum(ByVal result As System.IAsyncResult) As SR1.UserLocalNumResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#FindUser", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function FindUser(ByVal request As SR1.FindUserRequest) As SR1.FindUserResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#FindUser", ReplyAction:="*")>  _
        Function BeginFindUser(ByVal request As SR1.FindUserRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndFindUser(ByVal result As System.IAsyncResult) As SR1.FindUserResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://innovaphone.com/pbx#LocationUrl", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(Style:=System.ServiceModel.OperationFormatStyle.Rpc, Use:=System.ServiceModel.OperationFormatUse.Encoded),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(RegInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(No)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(CallInfo)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Info)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(Group)),  _
         System.ServiceModel.ServiceKnownTypeAttribute(GetType(UserInfo))>  _
        Function LocationUrl(ByVal request As SR1.LocationUrlRequest) As SR1.LocationUrlResponse
        
        <System.ServiceModel.OperationContractAttribute(AsyncPattern:=true, Action:="http://innovaphone.com/pbx#LocationUrl", ReplyAction:="*")>  _
        Function BeginLocationUrl(ByVal request As SR1.LocationUrlRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
        
        Function EndLocationUrl(ByVal result As System.IAsyncResult) As SR1.LocationUrlResponse
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="Version", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class VersionRequest
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="VersionResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class VersionResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public WSDLVersion As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public GatekeeperID As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public Location As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=3)>  _
        Public FirmwareVersion As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=4)>  _
        Public SerialNumber As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal WSDLVersion As Integer, ByVal GatekeeperID As String, ByVal Location As String, ByVal FirmwareVersion As String, ByVal SerialNumber As String)
            MyBase.New
            Me.WSDLVersion = WSDLVersion
            Me.GatekeeperID = GatekeeperID
            Me.Location = Location
            Me.FirmwareVersion = FirmwareVersion
            Me.SerialNumber = SerialNumber
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="Echo", WrapperNamespace:="http://innovaphone/binding", IsWrapped:=true)>  _
    Partial Public Class EchoRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public session As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public key As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal session As Integer, ByVal key As Integer)
            MyBase.New
            Me.session = session
            Me.key = key
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="EchoResponse", WrapperNamespace:="http://innovaphone/binding", IsWrapped:=true)>  _
    Partial Public Class EchoResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Integer)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="Admin", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class AdminRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public xml As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal xml As String)
            MyBase.New
            Me.xml = xml
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="AdminResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class AdminResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As String)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="Initialize", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class InitializeRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public user As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public appl As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public v As Boolean
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=3)>  _
        Public v501 As Boolean
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal user As String, ByVal appl As String, ByVal v As Boolean, ByVal v501 As Boolean)
            MyBase.New
            Me.user = user
            Me.appl = appl
            Me.v = v
            Me.v501 = v501
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="InitializeResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class InitializeResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public key As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Integer, ByVal key As Integer)
            MyBase.New
            Me.[return] = [return]
            Me.key = key
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="End", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class EndRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public session As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal session As Integer)
            MyBase.New
            Me.session = session
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="EndResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class EndResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://innovaphone.com/pbx")>  _
    Partial Public Class AnyInfo
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private userField() As UserInfo
        
        Private callField() As CallInfo
        
        Private regField() As RegInfo
        
        Private infoField() As Info
        
        '''<remarks/>
        Public Property user() As UserInfo()
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
                Me.RaisePropertyChanged("user")
            End Set
        End Property
        
        '''<remarks/>
        Public Property [call]() As CallInfo()
            Get
                Return Me.callField
            End Get
            Set
                Me.callField = value
                Me.RaisePropertyChanged("call")
            End Set
        End Property
        
        '''<remarks/>
        Public Property reg() As RegInfo()
            Get
                Return Me.regField
            End Get
            Set
                Me.regField = value
                Me.RaisePropertyChanged("reg")
            End Set
        End Property
        
        '''<remarks/>
        Public Property info() As Info()
            Get
                Return Me.infoField
            End Get
            Set
                Me.infoField = value
                Me.RaisePropertyChanged("info")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://innovaphone.com/pbx")>  _
    Partial Public Class UserInfo
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private guidField As String
        
        Private activeField As Boolean
        
        Private stateField As Integer
        
        Private channelField As Integer
        
        Private alertField As Integer
        
        Private cnField As String
        
        Private dnField As String
        
        Private typeField As String
        
        Private e164Field As String
        
        Private h323Field As String
        
        Private groupsField() As Group
        
        Private infoField() As Info
        
        '''<remarks/>
        Public Property guid() As String
            Get
                Return Me.guidField
            End Get
            Set
                Me.guidField = value
                Me.RaisePropertyChanged("guid")
            End Set
        End Property
        
        '''<remarks/>
        Public Property active() As Boolean
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
                Me.RaisePropertyChanged("active")
            End Set
        End Property
        
        '''<remarks/>
        Public Property state() As Integer
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
                Me.RaisePropertyChanged("state")
            End Set
        End Property
        
        '''<remarks/>
        Public Property channel() As Integer
            Get
                Return Me.channelField
            End Get
            Set
                Me.channelField = value
                Me.RaisePropertyChanged("channel")
            End Set
        End Property
        
        '''<remarks/>
        Public Property alert() As Integer
            Get
                Return Me.alertField
            End Get
            Set
                Me.alertField = value
                Me.RaisePropertyChanged("alert")
            End Set
        End Property
        
        '''<remarks/>
        Public Property cn() As String
            Get
                Return Me.cnField
            End Get
            Set
                Me.cnField = value
                Me.RaisePropertyChanged("cn")
            End Set
        End Property
        
        '''<remarks/>
        Public Property dn() As String
            Get
                Return Me.dnField
            End Get
            Set
                Me.dnField = value
                Me.RaisePropertyChanged("dn")
            End Set
        End Property
        
        '''<remarks/>
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
                Me.RaisePropertyChanged("type")
            End Set
        End Property
        
        '''<remarks/>
        Public Property e164() As String
            Get
                Return Me.e164Field
            End Get
            Set
                Me.e164Field = value
                Me.RaisePropertyChanged("e164")
            End Set
        End Property
        
        '''<remarks/>
        Public Property h323() As String
            Get
                Return Me.h323Field
            End Get
            Set
                Me.h323Field = value
                Me.RaisePropertyChanged("h323")
            End Set
        End Property
        
        '''<remarks/>
        Public Property groups() As Group()
            Get
                Return Me.groupsField
            End Get
            Set
                Me.groupsField = value
                Me.RaisePropertyChanged("groups")
            End Set
        End Property
        
        '''<remarks/>
        Public Property info() As Info()
            Get
                Return Me.infoField
            End Get
            Set
                Me.infoField = value
                Me.RaisePropertyChanged("info")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://innovaphone.com/pbx")>  _
    Partial Public Class Group
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private groupField As String
        
        Private activeField As Boolean
        
        '''<remarks/>
        Public Property group() As String
            Get
                Return Me.groupField
            End Get
            Set
                Me.groupField = value
                Me.RaisePropertyChanged("group")
            End Set
        End Property
        
        '''<remarks/>
        Public Property active() As Boolean
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
                Me.RaisePropertyChanged("active")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://innovaphone.com/pbx")>  _
    Partial Public Class RegInfo
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private activeField As Boolean
        
        Private userField As Integer
        
        Private regField As Integer
        
        Private hwField As String
        
        Private soapField As String
        
        Private infoField() As Info
        
        '''<remarks/>
        Public Property active() As Boolean
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
                Me.RaisePropertyChanged("active")
            End Set
        End Property
        
        '''<remarks/>
        Public Property user() As Integer
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
                Me.RaisePropertyChanged("user")
            End Set
        End Property
        
        '''<remarks/>
        Public Property reg() As Integer
            Get
                Return Me.regField
            End Get
            Set
                Me.regField = value
                Me.RaisePropertyChanged("reg")
            End Set
        End Property
        
        '''<remarks/>
        Public Property hw() As String
            Get
                Return Me.hwField
            End Get
            Set
                Me.hwField = value
                Me.RaisePropertyChanged("hw")
            End Set
        End Property
        
        '''<remarks/>
        Public Property soap() As String
            Get
                Return Me.soapField
            End Get
            Set
                Me.soapField = value
                Me.RaisePropertyChanged("soap")
            End Set
        End Property
        
        '''<remarks/>
        Public Property info() As Info()
            Get
                Return Me.infoField
            End Get
            Set
                Me.infoField = value
                Me.RaisePropertyChanged("info")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://innovaphone.com/pbx")>  _
    Partial Public Class Info
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private typeField As String
        
        Private valiField As Integer
        
        Private valsField As String
        
        '''<remarks/>
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
                Me.RaisePropertyChanged("type")
            End Set
        End Property
        
        '''<remarks/>
        Public Property vali() As Integer
            Get
                Return Me.valiField
            End Get
            Set
                Me.valiField = value
                Me.RaisePropertyChanged("vali")
            End Set
        End Property
        
        '''<remarks/>
        Public Property vals() As String
            Get
                Return Me.valsField
            End Get
            Set
                Me.valsField = value
                Me.RaisePropertyChanged("vals")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://innovaphone.com/pbx")>  _
    Partial Public Class No
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private typeField As String
        
        Private cnField As String
        
        Private dnField As String
        
        Private e164Field As String
        
        Private h323Field As String
        
        '''<remarks/>
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
                Me.RaisePropertyChanged("type")
            End Set
        End Property
        
        '''<remarks/>
        Public Property cn() As String
            Get
                Return Me.cnField
            End Get
            Set
                Me.cnField = value
                Me.RaisePropertyChanged("cn")
            End Set
        End Property
        
        '''<remarks/>
        Public Property dn() As String
            Get
                Return Me.dnField
            End Get
            Set
                Me.dnField = value
                Me.RaisePropertyChanged("dn")
            End Set
        End Property
        
        '''<remarks/>
        Public Property e164() As String
            Get
                Return Me.e164Field
            End Get
            Set
                Me.e164Field = value
                Me.RaisePropertyChanged("e164")
            End Set
        End Property
        
        '''<remarks/>
        Public Property h323() As String
            Get
                Return Me.h323Field
            End Get
            Set
                Me.h323Field = value
                Me.RaisePropertyChanged("h323")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.SoapTypeAttribute([Namespace]:="http://innovaphone.com/pbx")>  _
    Partial Public Class CallInfo
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private userField As Integer
        
        Private callField As Integer
        
        Private regField As Integer
        
        Private activeField As Boolean
        
        Private stateField As Integer
        
        Private noField() As No
        
        Private msgField As String
        
        Private infoField() As Info
        
        '''<remarks/>
        Public Property user() As Integer
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
                Me.RaisePropertyChanged("user")
            End Set
        End Property
        
        '''<remarks/>
        Public Property [call]() As Integer
            Get
                Return Me.callField
            End Get
            Set
                Me.callField = value
                Me.RaisePropertyChanged("call")
            End Set
        End Property
        
        '''<remarks/>
        Public Property reg() As Integer
            Get
                Return Me.regField
            End Get
            Set
                Me.regField = value
                Me.RaisePropertyChanged("reg")
            End Set
        End Property
        
        '''<remarks/>
        Public Property active() As Boolean
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
                Me.RaisePropertyChanged("active")
            End Set
        End Property
        
        '''<remarks/>
        Public Property state() As Integer
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
                Me.RaisePropertyChanged("state")
            End Set
        End Property
        
        '''<remarks/>
        Public Property No() As No()
            Get
                Return Me.noField
            End Get
            Set
                Me.noField = value
                Me.RaisePropertyChanged("No")
            End Set
        End Property
        
        '''<remarks/>
        Public Property msg() As String
            Get
                Return Me.msgField
            End Get
            Set
                Me.msgField = value
                Me.RaisePropertyChanged("msg")
            End Set
        End Property
        
        '''<remarks/>
        Public Property info() As Info()
            Get
                Return Me.infoField
            End Get
            Set
                Me.infoField = value
                Me.RaisePropertyChanged("info")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="Poll", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class PollRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public session As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal session As Integer)
            MyBase.New
            Me.session = session
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="PollResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class PollResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As SR1.AnyInfo
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As SR1.AnyInfo)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="License", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class LicenseRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public session As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public name As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal session As Integer, ByVal name As String)
            MyBase.New
            Me.session = session
            Me.name = name
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="LicenseResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class LicenseResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As String)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="Calls", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class CallsRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public session As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public user As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal session As Integer, ByVal user As String)
            MyBase.New
            Me.session = session
            Me.user = user
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="CallsResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class CallsResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return]() As CallInfo
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return]() As CallInfo)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserInitialize", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserInitializeRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public session As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public user As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public xfer As Boolean
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal session As Integer, ByVal user As String, ByVal xfer As Boolean)
            MyBase.New
            Me.session = session
            Me.user = user
            Me.xfer = xfer
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserInitializeResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserInitializeResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Integer)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserEnd", WrapperNamespace:="http://innovaphone/binding", IsWrapped:=true)>  _
    Partial Public Class UserEndRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public user As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal user As Integer)
            MyBase.New
            Me.user = user
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserEndResponse", WrapperNamespace:="http://innovaphone/binding", IsWrapped:=true)>  _
    Partial Public Class UserEndResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserCall", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserCallRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public user As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public cn As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public e164 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=3)>  _
        Public h323 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=4)>  _
        Public reg As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=5)>  _
        Public info() As Info
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal user As Integer, ByVal cn As String, ByVal e164 As String, ByVal h323 As String, ByVal reg As Integer, ByVal info() As Info)
            MyBase.New
            Me.user = user
            Me.cn = cn
            Me.e164 = e164
            Me.h323 = h323
            Me.reg = reg
            Me.info = info
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserCallResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserCallResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Integer)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserClear", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserClearRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public cause As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public info() As Info
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer, ByVal cause As Integer, ByVal info() As Info)
            MyBase.New
            Me.[call] = [call]
            Me.cause = cause
            Me.info = info
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserClearResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserClearResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserConnect", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserConnectRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer)
            MyBase.New
            Me.[call] = [call]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserConnectResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserConnectResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserPickup", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserPickupRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public user As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public cn As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public [call] As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=3)>  _
        Public group As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=4)>  _
        Public reg As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=5)>  _
        Public info() As Info
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal user As Integer, ByVal cn As String, ByVal [call] As Integer, ByVal group As String, ByVal reg As Integer, ByVal info() As Info)
            MyBase.New
            Me.user = user
            Me.cn = cn
            Me.[call] = [call]
            Me.group = group
            Me.reg = reg
            Me.info = info
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserPickupResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserPickupResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Integer)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserRedirect", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserRedirectRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public cn As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public e164 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=3)>  _
        Public h323 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=4)>  _
        Public info() As Info
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer, ByVal cn As String, ByVal e164 As String, ByVal h323 As String, ByVal info() As Info)
            MyBase.New
            Me.[call] = [call]
            Me.cn = cn
            Me.e164 = e164
            Me.h323 = h323
            Me.info = info
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserRedirectResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserRedirectResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Boolean
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Boolean)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserReroute", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserRerouteRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public cn As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public e164 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=3)>  _
        Public h323 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=4)>  _
        Public info() As Info
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer, ByVal cn As String, ByVal e164 As String, ByVal h323 As String, ByVal info() As Info)
            MyBase.New
            Me.[call] = [call]
            Me.cn = cn
            Me.e164 = e164
            Me.h323 = h323
            Me.info = info
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserRerouteResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserRerouteResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Boolean
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Boolean)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserTransfer", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserTransferRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public a As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public b As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal a As Integer, ByVal b As Integer)
            MyBase.New
            Me.a = a
            Me.b = b
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserTransferResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserTransferResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserCtComplete", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserCtCompleteRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public e164 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public h323 As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer, ByVal e164 As String, ByVal h323 As String)
            MyBase.New
            Me.[call] = [call]
            Me.e164 = e164
            Me.h323 = h323
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserCtCompleteResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserCtCompleteResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserHold", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserHoldRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer)
            MyBase.New
            Me.[call] = [call]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserHoldResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserHoldResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserRetrieve", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserRetrieveRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer)
            MyBase.New
            Me.[call] = [call]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserRetrieveResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserRetrieveResponse
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserPark", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserParkRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [call] As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public cn As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public position As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [call] As Integer, ByVal cn As String, ByVal position As Integer)
            MyBase.New
            Me.[call] = [call]
            Me.cn = cn
            Me.position = position
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserParkResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserParkResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As Integer)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserLocalNum", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserLocalNumRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public user As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public num As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal user As Integer, ByVal num As String)
            MyBase.New
            Me.user = user
            Me.num = num
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="UserLocalNumResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class UserLocalNumResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As String)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="FindUser", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class FindUserRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public v501 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public cn As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=2)>  _
        Public h323 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=3)>  _
        Public e164 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=4)>  _
        Public count As Integer
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=5)>  _
        Public [next] As Integer
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal v501 As String, ByVal cn As String, ByVal h323 As String, ByVal e164 As String, ByVal count As Integer, ByVal [next] As Integer)
            MyBase.New
            Me.v501 = v501
            Me.cn = cn
            Me.h323 = h323
            Me.e164 = e164
            Me.count = count
            Me.[next] = [next]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="FindUserResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class FindUserResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return]() As UserInfo
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return]() As UserInfo)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="LocationUrl", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class LocationUrlRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public v501 As String
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=1)>  _
        Public loc As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal v501 As String, ByVal loc As String)
            MyBase.New
            Me.v501 = v501
            Me.loc = loc
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="LocationUrlResponse", WrapperNamespace:="http://innovaphone.com/pbx", IsWrapped:=true)>  _
    Partial Public Class LocationUrlResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="", Order:=0)>  _
        Public [return] As String
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal [return] As String)
            MyBase.New
            Me.[return] = [return]
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Public Interface pbxPortTypeChannel
        Inherits SR1.pbxPortType, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class VersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.VersionResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.VersionResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class EchoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.EchoResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.EchoResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class AdminCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.AdminResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.AdminResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class InitializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.InitializeResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.InitializeResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class EndCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.EndResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.EndResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class PollCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.PollResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.PollResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class LicenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.LicenseResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.LicenseResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class CallsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.CallsResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.CallsResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserInitializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserInitializeResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserInitializeResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserEndCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserEndResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserEndResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserCallCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserCallResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserCallResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserClearCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserClearResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserClearResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserConnectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserConnectResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserConnectResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserPickupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserPickupResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserPickupResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserRedirectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserRedirectResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserRedirectResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserRerouteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserRerouteResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserRerouteResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserTransferResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserTransferResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserCtCompleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserCtCompleteResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserCtCompleteResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserHoldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserHoldResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserHoldResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserRetrieveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserRetrieveResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserRetrieveResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserParkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserParkResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserParkResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class UserLocalNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.UserLocalNumResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.UserLocalNumResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class FindUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.FindUserResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.FindUserResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class LocationUrlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Public Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As SR1.LocationUrlResponse
            Get
                MyBase.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SR1.LocationUrlResponse)
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>  _
    Partial Public Class pbxPortTypeClient
        Inherits System.ServiceModel.ClientBase(Of SR1.pbxPortType)
        Implements SR1.pbxPortType
        
        Private onBeginVersionDelegate As BeginOperationDelegate
        
        Private onEndVersionDelegate As EndOperationDelegate
        
        Private onVersionCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginEchoDelegate As BeginOperationDelegate
        
        Private onEndEchoDelegate As EndOperationDelegate
        
        Private onEchoCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginAdminDelegate As BeginOperationDelegate
        
        Private onEndAdminDelegate As EndOperationDelegate
        
        Private onAdminCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginInitializeDelegate As BeginOperationDelegate
        
        Private onEndInitializeDelegate As EndOperationDelegate
        
        Private onInitializeCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginEndDelegate As BeginOperationDelegate
        
        Private onEndEndDelegate As EndOperationDelegate
        
        Private onEndCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginPollDelegate As BeginOperationDelegate
        
        Private onEndPollDelegate As EndOperationDelegate
        
        Private onPollCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginLicenseDelegate As BeginOperationDelegate
        
        Private onEndLicenseDelegate As EndOperationDelegate
        
        Private onLicenseCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginCallsDelegate As BeginOperationDelegate
        
        Private onEndCallsDelegate As EndOperationDelegate
        
        Private onCallsCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserInitializeDelegate As BeginOperationDelegate
        
        Private onEndUserInitializeDelegate As EndOperationDelegate
        
        Private onUserInitializeCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserEndDelegate As BeginOperationDelegate
        
        Private onEndUserEndDelegate As EndOperationDelegate
        
        Private onUserEndCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserCallDelegate As BeginOperationDelegate
        
        Private onEndUserCallDelegate As EndOperationDelegate
        
        Private onUserCallCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserClearDelegate As BeginOperationDelegate
        
        Private onEndUserClearDelegate As EndOperationDelegate
        
        Private onUserClearCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserConnectDelegate As BeginOperationDelegate
        
        Private onEndUserConnectDelegate As EndOperationDelegate
        
        Private onUserConnectCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserPickupDelegate As BeginOperationDelegate
        
        Private onEndUserPickupDelegate As EndOperationDelegate
        
        Private onUserPickupCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserRedirectDelegate As BeginOperationDelegate
        
        Private onEndUserRedirectDelegate As EndOperationDelegate
        
        Private onUserRedirectCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserRerouteDelegate As BeginOperationDelegate
        
        Private onEndUserRerouteDelegate As EndOperationDelegate
        
        Private onUserRerouteCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserTransferDelegate As BeginOperationDelegate
        
        Private onEndUserTransferDelegate As EndOperationDelegate
        
        Private onUserTransferCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserCtCompleteDelegate As BeginOperationDelegate
        
        Private onEndUserCtCompleteDelegate As EndOperationDelegate
        
        Private onUserCtCompleteCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserHoldDelegate As BeginOperationDelegate
        
        Private onEndUserHoldDelegate As EndOperationDelegate
        
        Private onUserHoldCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserRetrieveDelegate As BeginOperationDelegate
        
        Private onEndUserRetrieveDelegate As EndOperationDelegate
        
        Private onUserRetrieveCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserParkDelegate As BeginOperationDelegate
        
        Private onEndUserParkDelegate As EndOperationDelegate
        
        Private onUserParkCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginUserLocalNumDelegate As BeginOperationDelegate
        
        Private onEndUserLocalNumDelegate As EndOperationDelegate
        
        Private onUserLocalNumCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginFindUserDelegate As BeginOperationDelegate
        
        Private onEndFindUserDelegate As EndOperationDelegate
        
        Private onFindUserCompletedDelegate As System.Threading.SendOrPostCallback
        
        Private onBeginLocationUrlDelegate As BeginOperationDelegate
        
        Private onEndLocationUrlDelegate As EndOperationDelegate
        
        Private onLocationUrlCompletedDelegate As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Event VersionCompleted As System.EventHandler(Of VersionCompletedEventArgs)
        
        Public Event EchoCompleted As System.EventHandler(Of EchoCompletedEventArgs)
        
        Public Event AdminCompleted As System.EventHandler(Of AdminCompletedEventArgs)
        
        Public Event InitializeCompleted As System.EventHandler(Of InitializeCompletedEventArgs)
        
        Public Event EndCompleted As System.EventHandler(Of EndCompletedEventArgs)
        
        Public Event PollCompleted As System.EventHandler(Of PollCompletedEventArgs)
        
        Public Event LicenseCompleted As System.EventHandler(Of LicenseCompletedEventArgs)
        
        Public Event CallsCompleted As System.EventHandler(Of CallsCompletedEventArgs)
        
        Public Event UserInitializeCompleted As System.EventHandler(Of UserInitializeCompletedEventArgs)
        
        Public Event UserEndCompleted As System.EventHandler(Of UserEndCompletedEventArgs)
        
        Public Event UserCallCompleted As System.EventHandler(Of UserCallCompletedEventArgs)
        
        Public Event UserClearCompleted As System.EventHandler(Of UserClearCompletedEventArgs)
        
        Public Event UserConnectCompleted As System.EventHandler(Of UserConnectCompletedEventArgs)
        
        Public Event UserPickupCompleted As System.EventHandler(Of UserPickupCompletedEventArgs)
        
        Public Event UserRedirectCompleted As System.EventHandler(Of UserRedirectCompletedEventArgs)
        
        Public Event UserRerouteCompleted As System.EventHandler(Of UserRerouteCompletedEventArgs)
        
        Public Event UserTransferCompleted As System.EventHandler(Of UserTransferCompletedEventArgs)
        
        Public Event UserCtCompleteCompleted As System.EventHandler(Of UserCtCompleteCompletedEventArgs)
        
        Public Event UserHoldCompleted As System.EventHandler(Of UserHoldCompletedEventArgs)
        
        Public Event UserRetrieveCompleted As System.EventHandler(Of UserRetrieveCompletedEventArgs)
        
        Public Event UserParkCompleted As System.EventHandler(Of UserParkCompletedEventArgs)
        
        Public Event UserLocalNumCompleted As System.EventHandler(Of UserLocalNumCompletedEventArgs)
        
        Public Event FindUserCompleted As System.EventHandler(Of FindUserCompletedEventArgs)
        
        Public Event LocationUrlCompleted As System.EventHandler(Of LocationUrlCompletedEventArgs)
        
        Public Function Version(ByVal request As SR1.VersionRequest) As SR1.VersionResponse Implements SR1.pbxPortType.Version
            Return MyBase.Channel.Version(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginVersion(ByVal request As SR1.VersionRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginVersion
            Return MyBase.Channel.BeginVersion(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndVersion(ByVal result As System.IAsyncResult) As SR1.VersionResponse Implements SR1.pbxPortType.EndVersion
            Return MyBase.Channel.EndVersion(result)
        End Function
        
        Private Function OnBeginVersion(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.VersionRequest = CType(inValues(0),SR1.VersionRequest)
            Return Me.BeginVersion(request, callback, asyncState)
        End Function
        
        Private Function OnEndVersion(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.VersionResponse = Me.EndVersion(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnVersionCompleted(ByVal state As Object)
            If (Not (Me.VersionCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent VersionCompleted(Me, New VersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub VersionAsync(ByVal request As SR1.VersionRequest)
            Me.VersionAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub VersionAsync(ByVal request As SR1.VersionRequest, ByVal userState As Object)
            If (Me.onBeginVersionDelegate Is Nothing) Then
                Me.onBeginVersionDelegate = AddressOf Me.OnBeginVersion
            End If
            If (Me.onEndVersionDelegate Is Nothing) Then
                Me.onEndVersionDelegate = AddressOf Me.OnEndVersion
            End If
            If (Me.onVersionCompletedDelegate Is Nothing) Then
                Me.onVersionCompletedDelegate = AddressOf Me.OnVersionCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginVersionDelegate, New Object() {request}, Me.onEndVersionDelegate, Me.onVersionCompletedDelegate, userState)
        End Sub
        
        Public Function Echo(ByVal request As SR1.EchoRequest) As SR1.EchoResponse Implements SR1.pbxPortType.Echo
            Return MyBase.Channel.Echo(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginEcho(ByVal request As SR1.EchoRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginEcho
            Return MyBase.Channel.BeginEcho(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndEcho(ByVal result As System.IAsyncResult) As SR1.EchoResponse Implements SR1.pbxPortType.EndEcho
            Return MyBase.Channel.EndEcho(result)
        End Function
        
        Private Function OnBeginEcho(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.EchoRequest = CType(inValues(0),SR1.EchoRequest)
            Return Me.BeginEcho(request, callback, asyncState)
        End Function
        
        Private Function OnEndEcho(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.EchoResponse = Me.EndEcho(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnEchoCompleted(ByVal state As Object)
            If (Not (Me.EchoCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent EchoCompleted(Me, New EchoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub EchoAsync(ByVal request As SR1.EchoRequest)
            Me.EchoAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub EchoAsync(ByVal request As SR1.EchoRequest, ByVal userState As Object)
            If (Me.onBeginEchoDelegate Is Nothing) Then
                Me.onBeginEchoDelegate = AddressOf Me.OnBeginEcho
            End If
            If (Me.onEndEchoDelegate Is Nothing) Then
                Me.onEndEchoDelegate = AddressOf Me.OnEndEcho
            End If
            If (Me.onEchoCompletedDelegate Is Nothing) Then
                Me.onEchoCompletedDelegate = AddressOf Me.OnEchoCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginEchoDelegate, New Object() {request}, Me.onEndEchoDelegate, Me.onEchoCompletedDelegate, userState)
        End Sub
        
        Public Function Admin(ByVal request As SR1.AdminRequest) As SR1.AdminResponse Implements SR1.pbxPortType.Admin
            Return MyBase.Channel.Admin(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginAdmin(ByVal request As SR1.AdminRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginAdmin
            Return MyBase.Channel.BeginAdmin(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndAdmin(ByVal result As System.IAsyncResult) As SR1.AdminResponse Implements SR1.pbxPortType.EndAdmin
            Return MyBase.Channel.EndAdmin(result)
        End Function
        
        Private Function OnBeginAdmin(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.AdminRequest = CType(inValues(0),SR1.AdminRequest)
            Return Me.BeginAdmin(request, callback, asyncState)
        End Function
        
        Private Function OnEndAdmin(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.AdminResponse = Me.EndAdmin(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnAdminCompleted(ByVal state As Object)
            If (Not (Me.AdminCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent AdminCompleted(Me, New AdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub AdminAsync(ByVal request As SR1.AdminRequest)
            Me.AdminAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub AdminAsync(ByVal request As SR1.AdminRequest, ByVal userState As Object)
            If (Me.onBeginAdminDelegate Is Nothing) Then
                Me.onBeginAdminDelegate = AddressOf Me.OnBeginAdmin
            End If
            If (Me.onEndAdminDelegate Is Nothing) Then
                Me.onEndAdminDelegate = AddressOf Me.OnEndAdmin
            End If
            If (Me.onAdminCompletedDelegate Is Nothing) Then
                Me.onAdminCompletedDelegate = AddressOf Me.OnAdminCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginAdminDelegate, New Object() {request}, Me.onEndAdminDelegate, Me.onAdminCompletedDelegate, userState)
        End Sub
        
        Public Function Initialize(ByVal request As SR1.InitializeRequest) As SR1.InitializeResponse Implements SR1.pbxPortType.Initialize
            Return MyBase.Channel.Initialize(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginInitialize(ByVal request As SR1.InitializeRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginInitialize
            Return MyBase.Channel.BeginInitialize(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndInitialize(ByVal result As System.IAsyncResult) As SR1.InitializeResponse Implements SR1.pbxPortType.EndInitialize
            Return MyBase.Channel.EndInitialize(result)
        End Function
        
        Private Function OnBeginInitialize(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.InitializeRequest = CType(inValues(0),SR1.InitializeRequest)
            Return Me.BeginInitialize(request, callback, asyncState)
        End Function
        
        Private Function OnEndInitialize(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.InitializeResponse = Me.EndInitialize(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnInitializeCompleted(ByVal state As Object)
            If (Not (Me.InitializeCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent InitializeCompleted(Me, New InitializeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub InitializeAsync(ByVal request As SR1.InitializeRequest)
            Me.InitializeAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub InitializeAsync(ByVal request As SR1.InitializeRequest, ByVal userState As Object)
            If (Me.onBeginInitializeDelegate Is Nothing) Then
                Me.onBeginInitializeDelegate = AddressOf Me.OnBeginInitialize
            End If
            If (Me.onEndInitializeDelegate Is Nothing) Then
                Me.onEndInitializeDelegate = AddressOf Me.OnEndInitialize
            End If
            If (Me.onInitializeCompletedDelegate Is Nothing) Then
                Me.onInitializeCompletedDelegate = AddressOf Me.OnInitializeCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginInitializeDelegate, New Object() {request}, Me.onEndInitializeDelegate, Me.onInitializeCompletedDelegate, userState)
        End Sub
        
        Public Function [End](ByVal request As SR1.EndRequest) As SR1.EndResponse Implements SR1.pbxPortType.[End]
            Return MyBase.Channel.End(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginEnd(ByVal request As SR1.EndRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginEnd
            Return MyBase.Channel.BeginEnd(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndEnd(ByVal result As System.IAsyncResult) As SR1.EndResponse Implements SR1.pbxPortType.EndEnd
            Return MyBase.Channel.EndEnd(result)
        End Function
        
        Private Function OnBeginEnd(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.EndRequest = CType(inValues(0),SR1.EndRequest)
            Return Me.BeginEnd(request, callback, asyncState)
        End Function
        
        Private Function OnEndEnd(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.EndResponse = Me.EndEnd(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnEndCompleted(ByVal state As Object)
            If (Not (Me.EndCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent EndCompleted(Me, New EndCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub EndAsync(ByVal request As SR1.EndRequest)
            Me.EndAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub EndAsync(ByVal request As SR1.EndRequest, ByVal userState As Object)
            If (Me.onBeginEndDelegate Is Nothing) Then
                Me.onBeginEndDelegate = AddressOf Me.OnBeginEnd
            End If
            If (Me.onEndEndDelegate Is Nothing) Then
                Me.onEndEndDelegate = AddressOf Me.OnEndEnd
            End If
            If (Me.onEndCompletedDelegate Is Nothing) Then
                Me.onEndCompletedDelegate = AddressOf Me.OnEndCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginEndDelegate, New Object() {request}, Me.onEndEndDelegate, Me.onEndCompletedDelegate, userState)
        End Sub
        
        Public Function Poll(ByVal request As SR1.PollRequest) As SR1.PollResponse Implements SR1.pbxPortType.Poll
            Return MyBase.Channel.Poll(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginPoll(ByVal request As SR1.PollRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginPoll
            Return MyBase.Channel.BeginPoll(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndPoll(ByVal result As System.IAsyncResult) As SR1.PollResponse Implements SR1.pbxPortType.EndPoll
            Return MyBase.Channel.EndPoll(result)
        End Function
        
        Private Function OnBeginPoll(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.PollRequest = CType(inValues(0),SR1.PollRequest)
            Return Me.BeginPoll(request, callback, asyncState)
        End Function
        
        Private Function OnEndPoll(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.PollResponse = Me.EndPoll(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnPollCompleted(ByVal state As Object)
            If (Not (Me.PollCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent PollCompleted(Me, New PollCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub PollAsync(ByVal request As SR1.PollRequest)
            Me.PollAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub PollAsync(ByVal request As SR1.PollRequest, ByVal userState As Object)
            If (Me.onBeginPollDelegate Is Nothing) Then
                Me.onBeginPollDelegate = AddressOf Me.OnBeginPoll
            End If
            If (Me.onEndPollDelegate Is Nothing) Then
                Me.onEndPollDelegate = AddressOf Me.OnEndPoll
            End If
            If (Me.onPollCompletedDelegate Is Nothing) Then
                Me.onPollCompletedDelegate = AddressOf Me.OnPollCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginPollDelegate, New Object() {request}, Me.onEndPollDelegate, Me.onPollCompletedDelegate, userState)
        End Sub
        
        Public Function License(ByVal request As SR1.LicenseRequest) As SR1.LicenseResponse Implements SR1.pbxPortType.License
            Return MyBase.Channel.License(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginLicense(ByVal request As SR1.LicenseRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginLicense
            Return MyBase.Channel.BeginLicense(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndLicense(ByVal result As System.IAsyncResult) As SR1.LicenseResponse Implements SR1.pbxPortType.EndLicense
            Return MyBase.Channel.EndLicense(result)
        End Function
        
        Private Function OnBeginLicense(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.LicenseRequest = CType(inValues(0),SR1.LicenseRequest)
            Return Me.BeginLicense(request, callback, asyncState)
        End Function
        
        Private Function OnEndLicense(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.LicenseResponse = Me.EndLicense(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnLicenseCompleted(ByVal state As Object)
            If (Not (Me.LicenseCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent LicenseCompleted(Me, New LicenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub LicenseAsync(ByVal request As SR1.LicenseRequest)
            Me.LicenseAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub LicenseAsync(ByVal request As SR1.LicenseRequest, ByVal userState As Object)
            If (Me.onBeginLicenseDelegate Is Nothing) Then
                Me.onBeginLicenseDelegate = AddressOf Me.OnBeginLicense
            End If
            If (Me.onEndLicenseDelegate Is Nothing) Then
                Me.onEndLicenseDelegate = AddressOf Me.OnEndLicense
            End If
            If (Me.onLicenseCompletedDelegate Is Nothing) Then
                Me.onLicenseCompletedDelegate = AddressOf Me.OnLicenseCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginLicenseDelegate, New Object() {request}, Me.onEndLicenseDelegate, Me.onLicenseCompletedDelegate, userState)
        End Sub
        
        Public Function Calls(ByVal request As SR1.CallsRequest) As SR1.CallsResponse Implements SR1.pbxPortType.Calls
            Return MyBase.Channel.Calls(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginCalls(ByVal request As SR1.CallsRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginCalls
            Return MyBase.Channel.BeginCalls(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndCalls(ByVal result As System.IAsyncResult) As SR1.CallsResponse Implements SR1.pbxPortType.EndCalls
            Return MyBase.Channel.EndCalls(result)
        End Function
        
        Private Function OnBeginCalls(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.CallsRequest = CType(inValues(0),SR1.CallsRequest)
            Return Me.BeginCalls(request, callback, asyncState)
        End Function
        
        Private Function OnEndCalls(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.CallsResponse = Me.EndCalls(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnCallsCompleted(ByVal state As Object)
            If (Not (Me.CallsCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent CallsCompleted(Me, New CallsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub CallsAsync(ByVal request As SR1.CallsRequest)
            Me.CallsAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub CallsAsync(ByVal request As SR1.CallsRequest, ByVal userState As Object)
            If (Me.onBeginCallsDelegate Is Nothing) Then
                Me.onBeginCallsDelegate = AddressOf Me.OnBeginCalls
            End If
            If (Me.onEndCallsDelegate Is Nothing) Then
                Me.onEndCallsDelegate = AddressOf Me.OnEndCalls
            End If
            If (Me.onCallsCompletedDelegate Is Nothing) Then
                Me.onCallsCompletedDelegate = AddressOf Me.OnCallsCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginCallsDelegate, New Object() {request}, Me.onEndCallsDelegate, Me.onCallsCompletedDelegate, userState)
        End Sub
        
        Public Function UserInitialize(ByVal request As SR1.UserInitializeRequest) As SR1.UserInitializeResponse Implements SR1.pbxPortType.UserInitialize
            Return MyBase.Channel.UserInitialize(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserInitialize(ByVal request As SR1.UserInitializeRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserInitialize
            Return MyBase.Channel.BeginUserInitialize(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserInitialize(ByVal result As System.IAsyncResult) As SR1.UserInitializeResponse Implements SR1.pbxPortType.EndUserInitialize
            Return MyBase.Channel.EndUserInitialize(result)
        End Function
        
        Private Function OnBeginUserInitialize(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserInitializeRequest = CType(inValues(0),SR1.UserInitializeRequest)
            Return Me.BeginUserInitialize(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserInitialize(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserInitializeResponse = Me.EndUserInitialize(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserInitializeCompleted(ByVal state As Object)
            If (Not (Me.UserInitializeCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserInitializeCompleted(Me, New UserInitializeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserInitializeAsync(ByVal request As SR1.UserInitializeRequest)
            Me.UserInitializeAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserInitializeAsync(ByVal request As SR1.UserInitializeRequest, ByVal userState As Object)
            If (Me.onBeginUserInitializeDelegate Is Nothing) Then
                Me.onBeginUserInitializeDelegate = AddressOf Me.OnBeginUserInitialize
            End If
            If (Me.onEndUserInitializeDelegate Is Nothing) Then
                Me.onEndUserInitializeDelegate = AddressOf Me.OnEndUserInitialize
            End If
            If (Me.onUserInitializeCompletedDelegate Is Nothing) Then
                Me.onUserInitializeCompletedDelegate = AddressOf Me.OnUserInitializeCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserInitializeDelegate, New Object() {request}, Me.onEndUserInitializeDelegate, Me.onUserInitializeCompletedDelegate, userState)
        End Sub
        
        Public Function UserEnd(ByVal request As SR1.UserEndRequest) As SR1.UserEndResponse Implements SR1.pbxPortType.UserEnd
            Return MyBase.Channel.UserEnd(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserEnd(ByVal request As SR1.UserEndRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserEnd
            Return MyBase.Channel.BeginUserEnd(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserEnd(ByVal result As System.IAsyncResult) As SR1.UserEndResponse Implements SR1.pbxPortType.EndUserEnd
            Return MyBase.Channel.EndUserEnd(result)
        End Function
        
        Private Function OnBeginUserEnd(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserEndRequest = CType(inValues(0),SR1.UserEndRequest)
            Return Me.BeginUserEnd(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserEnd(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserEndResponse = Me.EndUserEnd(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserEndCompleted(ByVal state As Object)
            If (Not (Me.UserEndCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserEndCompleted(Me, New UserEndCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserEndAsync(ByVal request As SR1.UserEndRequest)
            Me.UserEndAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserEndAsync(ByVal request As SR1.UserEndRequest, ByVal userState As Object)
            If (Me.onBeginUserEndDelegate Is Nothing) Then
                Me.onBeginUserEndDelegate = AddressOf Me.OnBeginUserEnd
            End If
            If (Me.onEndUserEndDelegate Is Nothing) Then
                Me.onEndUserEndDelegate = AddressOf Me.OnEndUserEnd
            End If
            If (Me.onUserEndCompletedDelegate Is Nothing) Then
                Me.onUserEndCompletedDelegate = AddressOf Me.OnUserEndCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserEndDelegate, New Object() {request}, Me.onEndUserEndDelegate, Me.onUserEndCompletedDelegate, userState)
        End Sub
        
        Public Function UserCall(ByVal request As SR1.UserCallRequest) As SR1.UserCallResponse Implements SR1.pbxPortType.UserCall
            Return MyBase.Channel.UserCall(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserCall(ByVal request As SR1.UserCallRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserCall
            Return MyBase.Channel.BeginUserCall(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserCall(ByVal result As System.IAsyncResult) As SR1.UserCallResponse Implements SR1.pbxPortType.EndUserCall
            Return MyBase.Channel.EndUserCall(result)
        End Function
        
        Private Function OnBeginUserCall(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserCallRequest = CType(inValues(0),SR1.UserCallRequest)
            Return Me.BeginUserCall(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserCall(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserCallResponse = Me.EndUserCall(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserCallCompleted(ByVal state As Object)
            If (Not (Me.UserCallCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserCallCompleted(Me, New UserCallCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserCallAsync(ByVal request As SR1.UserCallRequest)
            Me.UserCallAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserCallAsync(ByVal request As SR1.UserCallRequest, ByVal userState As Object)
            If (Me.onBeginUserCallDelegate Is Nothing) Then
                Me.onBeginUserCallDelegate = AddressOf Me.OnBeginUserCall
            End If
            If (Me.onEndUserCallDelegate Is Nothing) Then
                Me.onEndUserCallDelegate = AddressOf Me.OnEndUserCall
            End If
            If (Me.onUserCallCompletedDelegate Is Nothing) Then
                Me.onUserCallCompletedDelegate = AddressOf Me.OnUserCallCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserCallDelegate, New Object() {request}, Me.onEndUserCallDelegate, Me.onUserCallCompletedDelegate, userState)
        End Sub
        
        Public Function UserClear(ByVal request As SR1.UserClearRequest) As SR1.UserClearResponse Implements SR1.pbxPortType.UserClear
            Return MyBase.Channel.UserClear(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserClear(ByVal request As SR1.UserClearRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserClear
            Return MyBase.Channel.BeginUserClear(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserClear(ByVal result As System.IAsyncResult) As SR1.UserClearResponse Implements SR1.pbxPortType.EndUserClear
            Return MyBase.Channel.EndUserClear(result)
        End Function
        
        Private Function OnBeginUserClear(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserClearRequest = CType(inValues(0),SR1.UserClearRequest)
            Return Me.BeginUserClear(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserClear(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserClearResponse = Me.EndUserClear(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserClearCompleted(ByVal state As Object)
            If (Not (Me.UserClearCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserClearCompleted(Me, New UserClearCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserClearAsync(ByVal request As SR1.UserClearRequest)
            Me.UserClearAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserClearAsync(ByVal request As SR1.UserClearRequest, ByVal userState As Object)
            If (Me.onBeginUserClearDelegate Is Nothing) Then
                Me.onBeginUserClearDelegate = AddressOf Me.OnBeginUserClear
            End If
            If (Me.onEndUserClearDelegate Is Nothing) Then
                Me.onEndUserClearDelegate = AddressOf Me.OnEndUserClear
            End If
            If (Me.onUserClearCompletedDelegate Is Nothing) Then
                Me.onUserClearCompletedDelegate = AddressOf Me.OnUserClearCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserClearDelegate, New Object() {request}, Me.onEndUserClearDelegate, Me.onUserClearCompletedDelegate, userState)
        End Sub
        
        Public Function UserConnect(ByVal request As SR1.UserConnectRequest) As SR1.UserConnectResponse Implements SR1.pbxPortType.UserConnect
            Return MyBase.Channel.UserConnect(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserConnect(ByVal request As SR1.UserConnectRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserConnect
            Return MyBase.Channel.BeginUserConnect(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserConnect(ByVal result As System.IAsyncResult) As SR1.UserConnectResponse Implements SR1.pbxPortType.EndUserConnect
            Return MyBase.Channel.EndUserConnect(result)
        End Function
        
        Private Function OnBeginUserConnect(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserConnectRequest = CType(inValues(0),SR1.UserConnectRequest)
            Return Me.BeginUserConnect(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserConnect(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserConnectResponse = Me.EndUserConnect(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserConnectCompleted(ByVal state As Object)
            If (Not (Me.UserConnectCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserConnectCompleted(Me, New UserConnectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserConnectAsync(ByVal request As SR1.UserConnectRequest)
            Me.UserConnectAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserConnectAsync(ByVal request As SR1.UserConnectRequest, ByVal userState As Object)
            If (Me.onBeginUserConnectDelegate Is Nothing) Then
                Me.onBeginUserConnectDelegate = AddressOf Me.OnBeginUserConnect
            End If
            If (Me.onEndUserConnectDelegate Is Nothing) Then
                Me.onEndUserConnectDelegate = AddressOf Me.OnEndUserConnect
            End If
            If (Me.onUserConnectCompletedDelegate Is Nothing) Then
                Me.onUserConnectCompletedDelegate = AddressOf Me.OnUserConnectCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserConnectDelegate, New Object() {request}, Me.onEndUserConnectDelegate, Me.onUserConnectCompletedDelegate, userState)
        End Sub
        
        Public Function UserPickup(ByVal request As SR1.UserPickupRequest) As SR1.UserPickupResponse Implements SR1.pbxPortType.UserPickup
            Return MyBase.Channel.UserPickup(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserPickup(ByVal request As SR1.UserPickupRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserPickup
            Return MyBase.Channel.BeginUserPickup(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserPickup(ByVal result As System.IAsyncResult) As SR1.UserPickupResponse Implements SR1.pbxPortType.EndUserPickup
            Return MyBase.Channel.EndUserPickup(result)
        End Function
        
        Private Function OnBeginUserPickup(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserPickupRequest = CType(inValues(0),SR1.UserPickupRequest)
            Return Me.BeginUserPickup(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserPickup(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserPickupResponse = Me.EndUserPickup(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserPickupCompleted(ByVal state As Object)
            If (Not (Me.UserPickupCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserPickupCompleted(Me, New UserPickupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserPickupAsync(ByVal request As SR1.UserPickupRequest)
            Me.UserPickupAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserPickupAsync(ByVal request As SR1.UserPickupRequest, ByVal userState As Object)
            If (Me.onBeginUserPickupDelegate Is Nothing) Then
                Me.onBeginUserPickupDelegate = AddressOf Me.OnBeginUserPickup
            End If
            If (Me.onEndUserPickupDelegate Is Nothing) Then
                Me.onEndUserPickupDelegate = AddressOf Me.OnEndUserPickup
            End If
            If (Me.onUserPickupCompletedDelegate Is Nothing) Then
                Me.onUserPickupCompletedDelegate = AddressOf Me.OnUserPickupCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserPickupDelegate, New Object() {request}, Me.onEndUserPickupDelegate, Me.onUserPickupCompletedDelegate, userState)
        End Sub
        
        Public Function UserRedirect(ByVal request As SR1.UserRedirectRequest) As SR1.UserRedirectResponse Implements SR1.pbxPortType.UserRedirect
            Return MyBase.Channel.UserRedirect(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserRedirect(ByVal request As SR1.UserRedirectRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserRedirect
            Return MyBase.Channel.BeginUserRedirect(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserRedirect(ByVal result As System.IAsyncResult) As SR1.UserRedirectResponse Implements SR1.pbxPortType.EndUserRedirect
            Return MyBase.Channel.EndUserRedirect(result)
        End Function
        
        Private Function OnBeginUserRedirect(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserRedirectRequest = CType(inValues(0),SR1.UserRedirectRequest)
            Return Me.BeginUserRedirect(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserRedirect(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserRedirectResponse = Me.EndUserRedirect(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserRedirectCompleted(ByVal state As Object)
            If (Not (Me.UserRedirectCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserRedirectCompleted(Me, New UserRedirectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserRedirectAsync(ByVal request As SR1.UserRedirectRequest)
            Me.UserRedirectAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserRedirectAsync(ByVal request As SR1.UserRedirectRequest, ByVal userState As Object)
            If (Me.onBeginUserRedirectDelegate Is Nothing) Then
                Me.onBeginUserRedirectDelegate = AddressOf Me.OnBeginUserRedirect
            End If
            If (Me.onEndUserRedirectDelegate Is Nothing) Then
                Me.onEndUserRedirectDelegate = AddressOf Me.OnEndUserRedirect
            End If
            If (Me.onUserRedirectCompletedDelegate Is Nothing) Then
                Me.onUserRedirectCompletedDelegate = AddressOf Me.OnUserRedirectCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserRedirectDelegate, New Object() {request}, Me.onEndUserRedirectDelegate, Me.onUserRedirectCompletedDelegate, userState)
        End Sub
        
        Public Function UserReroute(ByVal request As SR1.UserRerouteRequest) As SR1.UserRerouteResponse Implements SR1.pbxPortType.UserReroute
            Return MyBase.Channel.UserReroute(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserReroute(ByVal request As SR1.UserRerouteRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserReroute
            Return MyBase.Channel.BeginUserReroute(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserReroute(ByVal result As System.IAsyncResult) As SR1.UserRerouteResponse Implements SR1.pbxPortType.EndUserReroute
            Return MyBase.Channel.EndUserReroute(result)
        End Function
        
        Private Function OnBeginUserReroute(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserRerouteRequest = CType(inValues(0),SR1.UserRerouteRequest)
            Return Me.BeginUserReroute(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserReroute(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserRerouteResponse = Me.EndUserReroute(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserRerouteCompleted(ByVal state As Object)
            If (Not (Me.UserRerouteCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserRerouteCompleted(Me, New UserRerouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserRerouteAsync(ByVal request As SR1.UserRerouteRequest)
            Me.UserRerouteAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserRerouteAsync(ByVal request As SR1.UserRerouteRequest, ByVal userState As Object)
            If (Me.onBeginUserRerouteDelegate Is Nothing) Then
                Me.onBeginUserRerouteDelegate = AddressOf Me.OnBeginUserReroute
            End If
            If (Me.onEndUserRerouteDelegate Is Nothing) Then
                Me.onEndUserRerouteDelegate = AddressOf Me.OnEndUserReroute
            End If
            If (Me.onUserRerouteCompletedDelegate Is Nothing) Then
                Me.onUserRerouteCompletedDelegate = AddressOf Me.OnUserRerouteCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserRerouteDelegate, New Object() {request}, Me.onEndUserRerouteDelegate, Me.onUserRerouteCompletedDelegate, userState)
        End Sub
        
        Public Function UserTransfer(ByVal request As SR1.UserTransferRequest) As SR1.UserTransferResponse Implements SR1.pbxPortType.UserTransfer
            Return MyBase.Channel.UserTransfer(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserTransfer(ByVal request As SR1.UserTransferRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserTransfer
            Return MyBase.Channel.BeginUserTransfer(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserTransfer(ByVal result As System.IAsyncResult) As SR1.UserTransferResponse Implements SR1.pbxPortType.EndUserTransfer
            Return MyBase.Channel.EndUserTransfer(result)
        End Function
        
        Private Function OnBeginUserTransfer(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserTransferRequest = CType(inValues(0),SR1.UserTransferRequest)
            Return Me.BeginUserTransfer(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserTransfer(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserTransferResponse = Me.EndUserTransfer(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserTransferCompleted(ByVal state As Object)
            If (Not (Me.UserTransferCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserTransferCompleted(Me, New UserTransferCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserTransferAsync(ByVal request As SR1.UserTransferRequest)
            Me.UserTransferAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserTransferAsync(ByVal request As SR1.UserTransferRequest, ByVal userState As Object)
            If (Me.onBeginUserTransferDelegate Is Nothing) Then
                Me.onBeginUserTransferDelegate = AddressOf Me.OnBeginUserTransfer
            End If
            If (Me.onEndUserTransferDelegate Is Nothing) Then
                Me.onEndUserTransferDelegate = AddressOf Me.OnEndUserTransfer
            End If
            If (Me.onUserTransferCompletedDelegate Is Nothing) Then
                Me.onUserTransferCompletedDelegate = AddressOf Me.OnUserTransferCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserTransferDelegate, New Object() {request}, Me.onEndUserTransferDelegate, Me.onUserTransferCompletedDelegate, userState)
        End Sub
        
        Public Function UserCtComplete(ByVal request As SR1.UserCtCompleteRequest) As SR1.UserCtCompleteResponse Implements SR1.pbxPortType.UserCtComplete
            Return MyBase.Channel.UserCtComplete(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserCtComplete(ByVal request As SR1.UserCtCompleteRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserCtComplete
            Return MyBase.Channel.BeginUserCtComplete(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserCtComplete(ByVal result As System.IAsyncResult) As SR1.UserCtCompleteResponse Implements SR1.pbxPortType.EndUserCtComplete
            Return MyBase.Channel.EndUserCtComplete(result)
        End Function
        
        Private Function OnBeginUserCtComplete(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserCtCompleteRequest = CType(inValues(0),SR1.UserCtCompleteRequest)
            Return Me.BeginUserCtComplete(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserCtComplete(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserCtCompleteResponse = Me.EndUserCtComplete(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserCtCompleteCompleted(ByVal state As Object)
            If (Not (Me.UserCtCompleteCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserCtCompleteCompleted(Me, New UserCtCompleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserCtCompleteAsync(ByVal request As SR1.UserCtCompleteRequest)
            Me.UserCtCompleteAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserCtCompleteAsync(ByVal request As SR1.UserCtCompleteRequest, ByVal userState As Object)
            If (Me.onBeginUserCtCompleteDelegate Is Nothing) Then
                Me.onBeginUserCtCompleteDelegate = AddressOf Me.OnBeginUserCtComplete
            End If
            If (Me.onEndUserCtCompleteDelegate Is Nothing) Then
                Me.onEndUserCtCompleteDelegate = AddressOf Me.OnEndUserCtComplete
            End If
            If (Me.onUserCtCompleteCompletedDelegate Is Nothing) Then
                Me.onUserCtCompleteCompletedDelegate = AddressOf Me.OnUserCtCompleteCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserCtCompleteDelegate, New Object() {request}, Me.onEndUserCtCompleteDelegate, Me.onUserCtCompleteCompletedDelegate, userState)
        End Sub
        
        Public Function UserHold(ByVal request As SR1.UserHoldRequest) As SR1.UserHoldResponse Implements SR1.pbxPortType.UserHold
            Return MyBase.Channel.UserHold(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserHold(ByVal request As SR1.UserHoldRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserHold
            Return MyBase.Channel.BeginUserHold(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserHold(ByVal result As System.IAsyncResult) As SR1.UserHoldResponse Implements SR1.pbxPortType.EndUserHold
            Return MyBase.Channel.EndUserHold(result)
        End Function
        
        Private Function OnBeginUserHold(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserHoldRequest = CType(inValues(0),SR1.UserHoldRequest)
            Return Me.BeginUserHold(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserHold(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserHoldResponse = Me.EndUserHold(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserHoldCompleted(ByVal state As Object)
            If (Not (Me.UserHoldCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserHoldCompleted(Me, New UserHoldCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserHoldAsync(ByVal request As SR1.UserHoldRequest)
            Me.UserHoldAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserHoldAsync(ByVal request As SR1.UserHoldRequest, ByVal userState As Object)
            If (Me.onBeginUserHoldDelegate Is Nothing) Then
                Me.onBeginUserHoldDelegate = AddressOf Me.OnBeginUserHold
            End If
            If (Me.onEndUserHoldDelegate Is Nothing) Then
                Me.onEndUserHoldDelegate = AddressOf Me.OnEndUserHold
            End If
            If (Me.onUserHoldCompletedDelegate Is Nothing) Then
                Me.onUserHoldCompletedDelegate = AddressOf Me.OnUserHoldCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserHoldDelegate, New Object() {request}, Me.onEndUserHoldDelegate, Me.onUserHoldCompletedDelegate, userState)
        End Sub
        
        Public Function UserRetrieve(ByVal request As SR1.UserRetrieveRequest) As SR1.UserRetrieveResponse Implements SR1.pbxPortType.UserRetrieve
            Return MyBase.Channel.UserRetrieve(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserRetrieve(ByVal request As SR1.UserRetrieveRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserRetrieve
            Return MyBase.Channel.BeginUserRetrieve(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserRetrieve(ByVal result As System.IAsyncResult) As SR1.UserRetrieveResponse Implements SR1.pbxPortType.EndUserRetrieve
            Return MyBase.Channel.EndUserRetrieve(result)
        End Function
        
        Private Function OnBeginUserRetrieve(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserRetrieveRequest = CType(inValues(0),SR1.UserRetrieveRequest)
            Return Me.BeginUserRetrieve(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserRetrieve(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserRetrieveResponse = Me.EndUserRetrieve(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserRetrieveCompleted(ByVal state As Object)
            If (Not (Me.UserRetrieveCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserRetrieveCompleted(Me, New UserRetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserRetrieveAsync(ByVal request As SR1.UserRetrieveRequest)
            Me.UserRetrieveAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserRetrieveAsync(ByVal request As SR1.UserRetrieveRequest, ByVal userState As Object)
            If (Me.onBeginUserRetrieveDelegate Is Nothing) Then
                Me.onBeginUserRetrieveDelegate = AddressOf Me.OnBeginUserRetrieve
            End If
            If (Me.onEndUserRetrieveDelegate Is Nothing) Then
                Me.onEndUserRetrieveDelegate = AddressOf Me.OnEndUserRetrieve
            End If
            If (Me.onUserRetrieveCompletedDelegate Is Nothing) Then
                Me.onUserRetrieveCompletedDelegate = AddressOf Me.OnUserRetrieveCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserRetrieveDelegate, New Object() {request}, Me.onEndUserRetrieveDelegate, Me.onUserRetrieveCompletedDelegate, userState)
        End Sub
        
        Public Function UserPark(ByVal request As SR1.UserParkRequest) As SR1.UserParkResponse Implements SR1.pbxPortType.UserPark
            Return MyBase.Channel.UserPark(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserPark(ByVal request As SR1.UserParkRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserPark
            Return MyBase.Channel.BeginUserPark(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserPark(ByVal result As System.IAsyncResult) As SR1.UserParkResponse Implements SR1.pbxPortType.EndUserPark
            Return MyBase.Channel.EndUserPark(result)
        End Function
        
        Private Function OnBeginUserPark(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserParkRequest = CType(inValues(0),SR1.UserParkRequest)
            Return Me.BeginUserPark(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserPark(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserParkResponse = Me.EndUserPark(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserParkCompleted(ByVal state As Object)
            If (Not (Me.UserParkCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserParkCompleted(Me, New UserParkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserParkAsync(ByVal request As SR1.UserParkRequest)
            Me.UserParkAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserParkAsync(ByVal request As SR1.UserParkRequest, ByVal userState As Object)
            If (Me.onBeginUserParkDelegate Is Nothing) Then
                Me.onBeginUserParkDelegate = AddressOf Me.OnBeginUserPark
            End If
            If (Me.onEndUserParkDelegate Is Nothing) Then
                Me.onEndUserParkDelegate = AddressOf Me.OnEndUserPark
            End If
            If (Me.onUserParkCompletedDelegate Is Nothing) Then
                Me.onUserParkCompletedDelegate = AddressOf Me.OnUserParkCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserParkDelegate, New Object() {request}, Me.onEndUserParkDelegate, Me.onUserParkCompletedDelegate, userState)
        End Sub
        
        Public Function UserLocalNum(ByVal request As SR1.UserLocalNumRequest) As SR1.UserLocalNumResponse Implements SR1.pbxPortType.UserLocalNum
            Return MyBase.Channel.UserLocalNum(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginUserLocalNum(ByVal request As SR1.UserLocalNumRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginUserLocalNum
            Return MyBase.Channel.BeginUserLocalNum(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndUserLocalNum(ByVal result As System.IAsyncResult) As SR1.UserLocalNumResponse Implements SR1.pbxPortType.EndUserLocalNum
            Return MyBase.Channel.EndUserLocalNum(result)
        End Function
        
        Private Function OnBeginUserLocalNum(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.UserLocalNumRequest = CType(inValues(0),SR1.UserLocalNumRequest)
            Return Me.BeginUserLocalNum(request, callback, asyncState)
        End Function
        
        Private Function OnEndUserLocalNum(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.UserLocalNumResponse = Me.EndUserLocalNum(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnUserLocalNumCompleted(ByVal state As Object)
            If (Not (Me.UserLocalNumCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent UserLocalNumCompleted(Me, New UserLocalNumCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub UserLocalNumAsync(ByVal request As SR1.UserLocalNumRequest)
            Me.UserLocalNumAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub UserLocalNumAsync(ByVal request As SR1.UserLocalNumRequest, ByVal userState As Object)
            If (Me.onBeginUserLocalNumDelegate Is Nothing) Then
                Me.onBeginUserLocalNumDelegate = AddressOf Me.OnBeginUserLocalNum
            End If
            If (Me.onEndUserLocalNumDelegate Is Nothing) Then
                Me.onEndUserLocalNumDelegate = AddressOf Me.OnEndUserLocalNum
            End If
            If (Me.onUserLocalNumCompletedDelegate Is Nothing) Then
                Me.onUserLocalNumCompletedDelegate = AddressOf Me.OnUserLocalNumCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginUserLocalNumDelegate, New Object() {request}, Me.onEndUserLocalNumDelegate, Me.onUserLocalNumCompletedDelegate, userState)
        End Sub
        
        Public Function FindUser(ByVal request As SR1.FindUserRequest) As SR1.FindUserResponse Implements SR1.pbxPortType.FindUser
            Return MyBase.Channel.FindUser(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginFindUser(ByVal request As SR1.FindUserRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginFindUser
            Return MyBase.Channel.BeginFindUser(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndFindUser(ByVal result As System.IAsyncResult) As SR1.FindUserResponse Implements SR1.pbxPortType.EndFindUser
            Return MyBase.Channel.EndFindUser(result)
        End Function
        
        Private Function OnBeginFindUser(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.FindUserRequest = CType(inValues(0),SR1.FindUserRequest)
            Return Me.BeginFindUser(request, callback, asyncState)
        End Function
        
        Private Function OnEndFindUser(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.FindUserResponse = Me.EndFindUser(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnFindUserCompleted(ByVal state As Object)
            If (Not (Me.FindUserCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent FindUserCompleted(Me, New FindUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub FindUserAsync(ByVal request As SR1.FindUserRequest)
            Me.FindUserAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub FindUserAsync(ByVal request As SR1.FindUserRequest, ByVal userState As Object)
            If (Me.onBeginFindUserDelegate Is Nothing) Then
                Me.onBeginFindUserDelegate = AddressOf Me.OnBeginFindUser
            End If
            If (Me.onEndFindUserDelegate Is Nothing) Then
                Me.onEndFindUserDelegate = AddressOf Me.OnEndFindUser
            End If
            If (Me.onFindUserCompletedDelegate Is Nothing) Then
                Me.onFindUserCompletedDelegate = AddressOf Me.OnFindUserCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginFindUserDelegate, New Object() {request}, Me.onEndFindUserDelegate, Me.onFindUserCompletedDelegate, userState)
        End Sub
        
        Public Function LocationUrl(ByVal request As SR1.LocationUrlRequest) As SR1.LocationUrlResponse Implements SR1.pbxPortType.LocationUrl
            Return MyBase.Channel.LocationUrl(request)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function BeginLocationUrl(ByVal request As SR1.LocationUrlRequest, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult Implements SR1.pbxPortType.BeginLocationUrl
            Return MyBase.Channel.BeginLocationUrl(request, callback, asyncState)
        End Function
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Function EndLocationUrl(ByVal result As System.IAsyncResult) As SR1.LocationUrlResponse Implements SR1.pbxPortType.EndLocationUrl
            Return MyBase.Channel.EndLocationUrl(result)
        End Function
        
        Private Function OnBeginLocationUrl(ByVal inValues() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Dim request As SR1.LocationUrlRequest = CType(inValues(0),SR1.LocationUrlRequest)
            Return Me.BeginLocationUrl(request, callback, asyncState)
        End Function
        
        Private Function OnEndLocationUrl(ByVal result As System.IAsyncResult) As Object()
            Dim retVal As SR1.LocationUrlResponse = Me.EndLocationUrl(result)
            Return New Object() {retVal}
        End Function
        
        Private Sub OnLocationUrlCompleted(ByVal state As Object)
            If (Not (Me.LocationUrlCompletedEvent) Is Nothing) Then
                Dim e As InvokeAsyncCompletedEventArgs = CType(state,InvokeAsyncCompletedEventArgs)
                RaiseEvent LocationUrlCompleted(Me, New LocationUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState))
            End If
        End Sub
        
        Public Overloads Sub LocationUrlAsync(ByVal request As SR1.LocationUrlRequest)
            Me.LocationUrlAsync(request, Nothing)
        End Sub
        
        Public Overloads Sub LocationUrlAsync(ByVal request As SR1.LocationUrlRequest, ByVal userState As Object)
            If (Me.onBeginLocationUrlDelegate Is Nothing) Then
                Me.onBeginLocationUrlDelegate = AddressOf Me.OnBeginLocationUrl
            End If
            If (Me.onEndLocationUrlDelegate Is Nothing) Then
                Me.onEndLocationUrlDelegate = AddressOf Me.OnEndLocationUrl
            End If
            If (Me.onLocationUrlCompletedDelegate Is Nothing) Then
                Me.onLocationUrlCompletedDelegate = AddressOf Me.OnLocationUrlCompleted
            End If
            MyBase.InvokeAsync(Me.onBeginLocationUrlDelegate, New Object() {request}, Me.onEndLocationUrlDelegate, Me.onLocationUrlCompletedDelegate, userState)
        End Sub
    End Class
End Namespace
